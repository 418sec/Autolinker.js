Ext.data.JsonP.Autolinker({"tagname":"class","name":"Autolinker","autodetected":{},"files":[{"filename":"autolinker.js","href":"autolinker.html#Autolinker"}],"extends":null,"members":[{"name":"version","tagname":"property","owner":"Autolinker","id":"property-version","meta":{}},{"name":"constructor","tagname":"method","owner":"Autolinker","id":"method-constructor","meta":{}},{"name":"compactMatches","tagname":"method","owner":"Autolinker","id":"method-compactMatches","meta":{"private":true}},{"name":"createMatchReturnVal","tagname":"method","owner":"Autolinker","id":"method-createMatchReturnVal","meta":{"private":true}},{"name":"getMatchers","tagname":"method","owner":"Autolinker","id":"method-getMatchers","meta":{"protected":true}},{"name":"getTagBuilder","tagname":"method","owner":"Autolinker","id":"method-getTagBuilder","meta":{}},{"name":"link","tagname":"method","owner":"Autolinker","id":"method-link","meta":{}},{"name":"normalizeStripPrefixCfg","tagname":"method","owner":"Autolinker","id":"method-normalizeStripPrefixCfg","meta":{"private":true}},{"name":"normalizeTruncateCfg","tagname":"method","owner":"Autolinker","id":"method-normalizeTruncateCfg","meta":{"private":true}},{"name":"normalizeUrlsCfg","tagname":"method","owner":"Autolinker","id":"method-normalizeUrlsCfg","meta":{}},{"name":"parse","tagname":"method","owner":"Autolinker","id":"method-parse","meta":{}},{"name":"parseText","tagname":"method","owner":"Autolinker","id":"method-parseText","meta":{"private":true}},{"name":"removeUnwantedMatches","tagname":"method","owner":"Autolinker","id":"method-removeUnwantedMatches","meta":{"private":true}},{"name":"link","tagname":"method","owner":"Autolinker","id":"static-method-link","meta":{"static":true}},{"name":"parse","tagname":"method","owner":"Autolinker","id":"static-method-parse","meta":{"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-Autolinker","short_doc":"Utility class used to process a given string of text, and wrap the matches in\nthe appropriate anchor (&lt;a&gt;) tags...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/autolinker.html#Autolinker' target='_blank'>autolinker.js</a></div></pre><div class='doc-contents'><p>Utility class used to process a given string of text, and wrap the matches in\nthe appropriate anchor (&lt;a&gt;) tags to turn them into links.</p>\n\n<p>Any of the configuration options may be provided in an Object (map) provided\nto the Autolinker constructor, which will configure how the <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">link()</a>\nmethod will process the links.</p>\n\n<p>For example:</p>\n\n<pre><code>var autolinker = new Autolinker( {\n    newWindow : false,\n    truncate  : 30\n} );\n\nvar html = autolinker.link( \"Joe went to www.yahoo.com\" );\n// produces: 'Joe went to &lt;a href=\"http://www.yahoo.com\"&gt;yahoo.com&lt;/a&gt;'\n</code></pre>\n\n<p>The <a href=\"#!/api/Autolinker-static-method-link\" rel=\"Autolinker-static-method-link\" class=\"docClass\">static link()</a> method may also be used to inline\noptions into a single call, which may be more convenient for one-off uses.\nFor example:</p>\n\n<pre><code>var html = <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">Autolinker.link</a>( \"Joe went to www.yahoo.com\", {\n    newWindow : false,\n    truncate  : 30\n} );\n// produces: 'Joe went to &lt;a href=\"http://www.yahoo.com\"&gt;yahoo.com&lt;/a&gt;'\n</code></pre>\n\n<h2>Custom Replacements of Links</h2>\n\n<p>If the configuration options do not provide enough flexibility, a replaceFn\nmay be provided to fully customize the output of Autolinker. This function is\ncalled once for each URL/Email/Phone#/Hashtag/Mention (Twitter, Instagram, Soundcloud)\nmatch that is encountered.</p>\n\n<p>For example:</p>\n\n<pre><code>var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Hashtags, and Mentions (Twitter, Instagram, Soundcloud)\n\nvar linkedText = <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">Autolinker.link</a>( input, {\n    replaceFn : function( match ) {\n        console.log( \"href = \", match.getAnchorHref() );\n        console.log( \"text = \", match.getAnchorText() );\n\n        switch( match.getType() ) {\n            case 'url' :\n                console.log( \"url: \", match.getUrl() );\n\n                if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n                    var tag = match.buildTag();  // returns an `<a href=\"#!/api/Autolinker.HtmlTag\" rel=\"Autolinker.HtmlTag\" class=\"docClass\">Autolinker.HtmlTag</a>` instance, which provides mutator methods for easy changes\n                    tag.setAttr( 'rel', 'nofollow' );\n                    tag.addClass( 'external-link' );\n\n                    return tag;\n\n                } else {\n                    return true;  // let Autolinker perform its normal anchor tag replacement\n                }\n\n            case 'email' :\n                var email = match.getEmail();\n                console.log( \"email: \", email );\n\n                if( email === \"my@own.address\" ) {\n                    return false;  // don't auto-link this particular email address; leave as-is\n                } else {\n                    return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n                }\n\n            case 'phone' :\n                var phoneNumber = match.getPhoneNumber();\n                console.log( phoneNumber );\n\n                return '&lt;a href=\"http://newplace.to.link.phone.numbers.to/\"&gt;' + phoneNumber + '&lt;/a&gt;';\n\n            case 'hashtag' :\n                var hashtag = match.getHashtag();\n                console.log( hashtag );\n\n                return '&lt;a href=\"http://newplace.to.link.hashtag.handles.to/\"&gt;' + hashtag + '&lt;/a&gt;';\n\n            case 'mention' :\n                var mention = match.getMention();\n                console.log( mention );\n\n                return '&lt;a href=\"http://newplace.to.link.mention.to/\"&gt;' + mention + '&lt;/a&gt;';\n        }\n    }\n} );\n</code></pre>\n\n<p>The function may return the following values:</p>\n\n<ul>\n<li><code>true</code> (Boolean): Allow Autolinker to replace the match as it normally\nwould.</li>\n<li><code>false</code> (Boolean): Do not replace the current match at all - leave as-is.</li>\n<li>Any String: If a string is returned from the function, the string will be\nused directly as the replacement HTML for the match.</li>\n<li>An <a href=\"#!/api/Autolinker.HtmlTag\" rel=\"Autolinker.HtmlTag\" class=\"docClass\">Autolinker.HtmlTag</a> instance, which can be used to build/modify\nan HTML tag before writing out its HTML text.</li>\n</ul>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-version' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-property-version' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-property-version' class='name expandable'>version</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The Autolinker version number in the form major.minor.patch\n\nEx: 0.25.1 ...</div><div class='long'><p>The Autolinker version number in the form major.minor.patch</p>\n\n<p>Ex: 0.25.1</p>\n<p>Defaults to: <code>&#39;1.8.3&#39;</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Autolinker-method-constructor' class='name expandable'>Autolinker</a>( <span class='pre'>[cfg]</span> ) : <a href=\"#!/api/Autolinker\" rel=\"Autolinker\" class=\"docClass\">Autolinker</a><span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cfg</span> : Object (optional)<div class='sub-desc'><p>The configuration options for the Autolinker instance,\n  specified in an Object (map).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker\" rel=\"Autolinker\" class=\"docClass\">Autolinker</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-compactMatches' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-compactMatches' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-compactMatches' class='name expandable'>compactMatches</a>( <span class='pre'>matches</span> ) : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>After we have found all matches, we need to remove matches that overlap\nwith a previous match. ...</div><div class='long'><p>After we have found all matches, we need to remove matches that overlap\nwith a previous match. This can happen for instance with URLs, where the\nurl 'google.com/<a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">link</a>' would match '<a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">link</a>' as a hashtag. Because the\n'<a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">link</a>' part is contained in a larger match that comes before the HashTag\nmatch, we'll remove the HashTag match.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>matches</span> : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-createMatchReturnVal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-createMatchReturnVal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-createMatchReturnVal' class='name expandable'>createMatchReturnVal</a>( <span class='pre'>match</span> ) : String<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Creates the return string value for a given match in the input string. ...</div><div class='long'><p>Creates the return string value for a given match in the input string.</p>\n\n<p>This method handles the replaceFn, if one was provided.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>match</span> : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a><div class='sub-desc'><p>The Match object that represents\n  the match.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The string that the <code>match</code> should be replaced with.\n  This is usually the anchor tag string, but may be the <code>matchStr</code> itself\n  if the match is not to be replaced.</p>\n</div></li></ul></div></div></div><div id='method-getMatchers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-getMatchers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-getMatchers' class='name expandable'>getMatchers</a>( <span class='pre'></span> ) : <a href=\"#!/api/Autolinker.matcher.Matcher\" rel=\"Autolinker.matcher.Matcher\" class=\"docClass\">Autolinker.matcher.Matcher</a>[]<span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>Lazily instantiates and returns the Autolinker.matcher.Matcher\ninstances for this Autolinker instance. ...</div><div class='long'><p>Lazily instantiates and returns the <a href=\"#!/api/Autolinker.matcher.Matcher\" rel=\"Autolinker.matcher.Matcher\" class=\"docClass\">Autolinker.matcher.Matcher</a>\ninstances for this Autolinker instance.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.matcher.Matcher\" rel=\"Autolinker.matcher.Matcher\" class=\"docClass\">Autolinker.matcher.Matcher</a>[]</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getTagBuilder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-getTagBuilder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-getTagBuilder' class='name expandable'>getTagBuilder</a>( <span class='pre'></span> ) : <a href=\"#!/api/Autolinker.AnchorTagBuilder\" rel=\"Autolinker.AnchorTagBuilder\" class=\"docClass\">Autolinker.AnchorTagBuilder</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the tagBuilder instance for this Autolinker instance, lazily instantiating it\nif it does not yet exist. ...</div><div class='long'><p>Returns the tagBuilder instance for this Autolinker instance, lazily instantiating it\nif it does not yet exist.</p>\n\n<p>This method may be used in a replaceFn to generate the <a href=\"#!/api/Autolinker.HtmlTag\" rel=\"Autolinker.HtmlTag\" class=\"docClass\">HtmlTag</a> instance that\nAutolinker would normally generate, and then allow for modifications before returning it. For example:</p>\n\n<pre><code>var html = <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">Autolinker.link</a>( \"Test google.com\", {\n    replaceFn : function( match ) {\n        var tag = match.buildTag();  // returns an <a href=\"#!/api/Autolinker.HtmlTag\" rel=\"Autolinker.HtmlTag\" class=\"docClass\">Autolinker.HtmlTag</a> instance\n        tag.setAttr( 'rel', 'nofollow' );\n\n        return tag;\n    }\n} );\n\n// generated html:\n//   Test &lt;a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\"&gt;google.com&lt;/a&gt;\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.AnchorTagBuilder\" rel=\"Autolinker.AnchorTagBuilder\" class=\"docClass\">Autolinker.AnchorTagBuilder</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-link' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-link' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-link' class='name expandable'>link</a>( <span class='pre'>textOrHtml</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Automatically links URLs, Email addresses, Phone numbers, Hashtags,\nand Mentions (Twitter, Instagram, Soundcloud) fou...</div><div class='long'><p>Automatically links URLs, Email addresses, Phone numbers, Hashtags,\nand Mentions (Twitter, Instagram, Soundcloud) found in the given chunk of HTML. Does not link\nURLs found within HTML tags.</p>\n\n<p>For instance, if given the text: <code>You should go to http://www.yahoo.com</code>,\nthen the result will be <code>You should go to\n&amp;lt;a href=\"http://www.yahoo.com\"&amp;gt;http://www.yahoo.com&amp;lt;/a&amp;gt;</code></p>\n\n<p>This method finds the text around any HTML elements in the input\n<code>textOrHtml</code>, which will be the text that is processed. Any original HTML\nelements will be left as-is, as well as the text that is already wrapped\nin anchor (&lt;a&gt;) tags.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>textOrHtml</span> : String<div class='sub-desc'><p>The HTML or text to autolink matches within\n  (depending on if the urls, email, phone, hashtag, and mention options are enabled).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The HTML, with matches automatically linked.</p>\n</div></li></ul></div></div></div><div id='method-normalizeStripPrefixCfg' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-normalizeStripPrefixCfg' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-normalizeStripPrefixCfg' class='name expandable'>normalizeStripPrefixCfg</a>( <span class='pre'>stripPrefix</span> ) : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Normalizes the stripPrefix config into an Object with 2\nproperties: scheme, and www - both Booleans. ...</div><div class='long'><p>Normalizes the stripPrefix config into an Object with 2\nproperties: <code>scheme</code>, and <code>www</code> - both Booleans.</p>\n\n<p>See stripPrefix config for details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stripPrefix</span> : Boolean/Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-normalizeTruncateCfg' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-normalizeTruncateCfg' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-normalizeTruncateCfg' class='name expandable'>normalizeTruncateCfg</a>( <span class='pre'>truncate</span> ) : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Normalizes the truncate config into an Object with 2 properties:\nlength (Number), and location (String). ...</div><div class='long'><p>Normalizes the truncate config into an Object with 2 properties:\n<code>length</code> (Number), and <code>location</code> (String).</p>\n\n<p>See truncate config for details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>truncate</span> : Number/Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-normalizeUrlsCfg' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-normalizeUrlsCfg' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-normalizeUrlsCfg' class='name expandable'>normalizeUrlsCfg</a>( <span class='pre'>urls</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Normalizes the urls config into an Object with 3 properties:\nschemeMatches, wwwMatches, and tldMatches, all Booleans. ...</div><div class='long'><p>Normalizes the urls config into an Object with 3 properties:\n<code>schemeMatches</code>, <code>wwwMatches</code>, and <code>tldMatches</code>, all Booleans.</p>\n\n<p>See urls config for details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>urls</span> : Boolean/Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-parse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-parse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-parse' class='name expandable'>parse</a>( <span class='pre'>textOrHtml</span> ) : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]<span class=\"signature\"></span></div><div class='description'><div class='short'>Parses the input textOrHtml looking for URLs, email addresses, phone\nnumbers, username handles, and hashtags (dependi...</div><div class='long'><p>Parses the input <code>textOrHtml</code> looking for URLs, email addresses, phone\nnumbers, username handles, and hashtags (depending on the configuration\nof the Autolinker instance), and returns an array of <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>\nobjects describing those matches (without making any replacements).</p>\n\n<p>This method is used by the <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">link</a> method, but can also be used to\nsimply do parsing of the input in order to discover what kinds of links\nthere are and how many.</p>\n\n<p>Example usage:</p>\n\n<pre><code>var autolinker = new Autolinker( {\n    urls: true,\n    email: true\n} );\n\nvar matches = autolinker.parse( \"Hello google.com, I am asdf@asdf.com\" );\n\nconsole.log( matches.length );           // 2\nconsole.log( matches[ 0 ].getType() );   // 'url'\nconsole.log( matches[ 0 ].getUrl() );    // 'google.com'\nconsole.log( matches[ 1 ].getType() );   // 'email'\nconsole.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>textOrHtml</span> : String<div class='sub-desc'><p>The HTML or text to find matches within\n  (depending on if the urls, email, phone,\n  hashtag, and mention options are enabled).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]</span><div class='sub-desc'><p>The array of Matches found in the\n  given input <code>textOrHtml</code>.</p>\n</div></li></ul></div></div></div><div id='method-parseText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-parseText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-parseText' class='name expandable'>parseText</a>( <span class='pre'>text, [offset]</span> ) : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Parses the input text looking for URLs, email addresses, phone\nnumbers, username handles, and hashtags (depending on ...</div><div class='long'><p>Parses the input <code>text</code> looking for URLs, email addresses, phone\nnumbers, username handles, and hashtags (depending on the configuration\nof the Autolinker instance), and returns an array of <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>\nobjects describing those matches.</p>\n\n<p>This method processes a <strong>non-HTML string</strong>, and is used to parse and\nmatch within the text nodes of an HTML string. This method is used\ninternally by <a href=\"#!/api/Autolinker-method-parse\" rel=\"Autolinker-method-parse\" class=\"docClass\">parse</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : String<div class='sub-desc'><p>The text to find matches within (depending on if the\n  urls, email, phone,\n  hashtag, and mention options are enabled). This must be a non-HTML string.</p>\n</div></li><li><span class='pre'>offset</span> : Number (optional)<div class='sub-desc'><p>The offset of the text node within the\n  original string. This is used when parsing with the <a href=\"#!/api/Autolinker-method-parse\" rel=\"Autolinker-method-parse\" class=\"docClass\">parse</a>\n  method to generate correct offsets within the <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>\n  instances, but may be omitted if calling this method publicly.</p>\n<p>Defaults to: <code>0</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]</span><div class='sub-desc'><p>The array of Matches found in the\n  given input <code>text</code>.</p>\n</div></li></ul></div></div></div><div id='method-removeUnwantedMatches' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-method-removeUnwantedMatches' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-removeUnwantedMatches' class='name expandable'>removeUnwantedMatches</a>( <span class='pre'>matches</span> ) : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Removes matches for matchers that were turned off in the options. ...</div><div class='long'><p>Removes matches for matchers that were turned off in the options. For\nexample, if hashtags were not to be matched, we'll\nremove them from the <code>matches</code> array here.</p>\n\n<p>Note: we <em>must</em> use all Matchers on the input string, and then filter\nthem out later. For example, if the options were <code>{ url: false, hashtag: true }</code>,\nwe wouldn't want to match the text '<a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">link</a>' as a HashTag inside of the text\n'google.com/<a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">link</a>'. The way the algorithm works is that we match the full\nURL first (which prevents the accidental HashTag match), and then we'll\nsimply throw away the URL match.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>matches</span> : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]<div class='sub-desc'><p>The array of matches to remove\n  the unwanted matches from. Note: this array is mutated for the\n  removals.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]</span><div class='sub-desc'><p>The mutated input <code>matches</code> array.</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-link' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-static-method-link' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-static-method-link' class='name expandable'>link</a>( <span class='pre'>textOrHtml, [options]</span> ) : String<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\nHashtags, and Mentions found in the given ...</div><div class='long'><p>Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\nHashtags, and Mentions found in the given chunk of HTML. Does not link URLs\nfound within HTML tags.</p>\n\n<p>For instance, if given the text: <code>You should go to http://www.yahoo.com</code>,\nthen the result will be <code>You should go to &amp;lt;a href=\"http://www.yahoo.com\"&amp;gt;http://www.yahoo.com&amp;lt;/a&amp;gt;</code></p>\n\n<p>Example:</p>\n\n<pre><code>var linkedText = <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">Autolinker.link</a>( \"Go to google.com\", { newWindow: false } );\n// Produces: \"Go to &lt;a href=\"http://google.com\"&gt;google.com&lt;/a&gt;\"\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>textOrHtml</span> : String<div class='sub-desc'><p>The HTML or text to find matches within (depending\n  on if the urls, email, phone, mention,\n  hashtag, and mention options are enabled).</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>Any of the configuration options for the Autolinker\n  class, specified in an Object (map). See the class description for an\n  example call.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The HTML text, with matches automatically linked.</p>\n</div></li></ul></div></div></div><div id='static-method-parse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/autolinker.html#Autolinker-static-method-parse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-static-method-parse' class='name expandable'>parse</a>( <span class='pre'>textOrHtml, [options]</span> ) : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Parses the input textOrHtml looking for URLs, email addresses, phone\nnumbers, username handles, and hashtags (dependi...</div><div class='long'><p>Parses the input <code>textOrHtml</code> looking for URLs, email addresses, phone\nnumbers, username handles, and hashtags (depending on the configuration\nof the Autolinker instance), and returns an array of <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>\nobjects describing those matches (without making any replacements).</p>\n\n<p>Note that if parsing multiple pieces of text, it is slightly more efficient\nto create an Autolinker instance, and use the instance-level <a href=\"#!/api/Autolinker-method-parse\" rel=\"Autolinker-method-parse\" class=\"docClass\">parse</a>\nmethod.</p>\n\n<p>Example:</p>\n\n<pre><code>var matches = <a href=\"#!/api/Autolinker-method-parse\" rel=\"Autolinker-method-parse\" class=\"docClass\">Autolinker.parse</a>( \"Hello google.com, I am asdf@asdf.com\", {\n    urls: true,\n    email: true\n} );\n\nconsole.log( matches.length );           // 2\nconsole.log( matches[ 0 ].getType() );   // 'url'\nconsole.log( matches[ 0 ].getUrl() );    // 'google.com'\nconsole.log( matches[ 1 ].getType() );   // 'email'\nconsole.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>textOrHtml</span> : String<div class='sub-desc'><p>The HTML or text to find matches within\n  (depending on if the urls, email, phone,\n  hashtag, and mention options are enabled).</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>Any of the configuration options for the Autolinker\n  class, specified in an Object (map). See the class description for an\n  example call.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a>[]</span><div class='sub-desc'><p>The array of Matches found in the\n  given input <code>textOrHtml</code>.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});