[4mRunning "jasmine:dist" (jasmine) task[24m
Testing jasmine specs via PhantomJS

 Autolinker
   instantiating and using as a class
     - should configure the instance with configuration options, and then be able to execute the link() method......âœ“
   config checking
     `hashtag` cfg
       - should throw if `hashtag` is a value other than `false` or one of the valid service names......âœ“
       - should not throw for a valid service name......âœ“
   link() method
     URL linking
       protocol-prefixed URLs (i.e. URLs starting with http:// or https://)
         - should automatically link URLs in the form of http://yahoo.com......âœ“
         - should automatically link localhost URLs when there is a protocol......âœ“
         - should automatically link localhost URLs when there is a protocol and port......âœ“
         - should automatically link localhost URLs when there is a protocol, port, and path......âœ“
         - should automatically link localhost URLs when there is a protocol, port, and query string......âœ“
         - should automatically link localhost URLs when there is a protocol, port, and hash......âœ“
         - should not include [?!:,.;'] chars if at the end of the URL......âœ“
         - should automatically link URLs in the form of http://www.yahoo.com (i.e. protocol and 'www' prefix)......âœ“
         - should automatically link https URLs in the form of https://yahoo.com......âœ“
         - should automatically link capitalized URLs......âœ“
         - should automatically link 'yahoo.xyz' (a known TLD), but not 'sencha.etc' (an unknown TLD)......âœ“
         - should automatically link 'a.museum' (a known TLD), but not 'abc.123'......âœ“
         - should automatically link URLs in the form of 'http://yahoo.com.', without including the trailing period......âœ“
         - should automatically link URLs with a port number......âœ“
         - should automatically link URLs with a port number and a following slash......âœ“
         - should automatically link URLs with a port number and a path......âœ“
         - should automatically link a localhost URL with a port number and a path......âœ“
         - should automatically link URLs with a port number and a query string......âœ“
         - should automatically link a localhost URL with a port number and a query string......âœ“
         - should automatically link URLs with a port number and a hash string......âœ“
         - should automatically link a localhost URL with a port number and a hash string......âœ“
         protocol linking
           - should NOT include preceding ':' introductions without a space......âœ“
           - should autolink protocols with at least two characters......âœ“
           - should autolink protocols with more than 9 characters (as was the previous upper bound, but it seems protocols may be longer)......âœ“
           - should NOT autolink a protocol with only one character......âœ“
           - should autolink protocols with digits, dashes, dots, and plus signs in their names......âœ“
           - should NOT autolink protocols that start with a digit, dash, plus sign, or dot, as per http://tools.ietf.org/html/rfc3986#section-3.1......âœ“
           - should NOT autolink possible URLs with the 'javascript:' URI scheme......âœ“
           - should NOT autolink possible URLs with the 'javascript:' URI scheme, with different upper/lowercase letters in the uri scheme......âœ“
           - should NOT autolink possible URLs with the 'vbscript:' URI scheme......âœ“
           - should NOT autolink possible URLs with the 'vbscript:' URI scheme, with different upper/lowercase letters in the uri scheme......âœ“
           - should NOT automatically link strings of the form 'git:d' (using the heuristic that the domain name does not have a '.' in it)......âœ“
           - should NOT automatically link strings of the form 'git:domain' (using the heuristic that the domain name does not have a '.' in it)......âœ“
           - should automatically link strings of the form 'git:domain.com', interpreting this as a protocol and domain name......âœ“
           - should NOT automatically link a string in the form of 'version:1.0'......âœ“
           - should NOT automatically link these 'abc:def' style strings......âœ“
       'www.' prefixed URLs
         - should automatically link URLs in the form of www.yahoo.com, prepending the http:// in this case......âœ“
         - should automatically link URLs in the form of 'www.yahoo.com.', without including the trailing period......âœ“
         - should automatically link URLs in the form of 'www.yahoo.com:8000' (with a port number)......âœ“
         - should automatically link URLs in the form of 'www.yahoo.com:8000/abc' (with a port number and path)......âœ“
         - should automatically link URLs in the form of 'www.yahoo.com:8000?abc' (with a port number and query string)......âœ“
         - should automatically link URLs in the form of 'www.yahoo.com:8000#abc' (with a port number and hash)......âœ“
         - should automatically link capitalized URLs......âœ“
         - should not include [?!:,.;'] chars if at the end of the URL......âœ“
       URLs with no protocol prefix, and no 'www' (i.e. URLs with known TLDs)
         - should automatically link URLs in the form of yahoo.com, prepending the http:// in this case......âœ“
         - should automatically link URLs in the form of subdomain.yahoo.com......âœ“
         - should automatically link URLs in the form of yahoo.co.uk, prepending the http:// in this case......âœ“
         - should automatically link URLs in the form of yahoo.ru, prepending the http:// in this case......âœ“
         - should automatically link URLs in the form of 'yahoo.com.', without including the trailing period......âœ“
         - should automatically link URLs in the form of 'yahoo.com:8000' (with a port number)......âœ“
         - should automatically link URLs in the form of 'yahoo.com:8000/abc' (with a port number and path)......âœ“
         - should automatically link URLs in the form of 'yahoo.com:8000?abc' (with a port number and query string)......âœ“
         - should automatically link URLs in the form of 'yahoo.com:8000#abc' (with a port number and hash)......âœ“
         - should automatically link capitalized URLs......âœ“
         - should not include [?!:,.;'] chars if at the end of the URL......âœ“
       protocol-relative URLs (i.e. URLs starting with only '//')
         - should automatically link protocol-relative URLs in the form of //yahoo.com at the beginning of the string......âœ“
         - should automatically link protocol-relative URLs in the form of //yahoo.com in the middle of the string......âœ“
         - should automatically link protocol-relative URLs in the form of //yahoo.com at the end of the string......âœ“
         - should automatically link capitalized protocol-relative URLs......âœ“
         - should NOT automatically link supposed protocol-relative URLs in the form of abc//yahoo.com, which is most likely not supposed to be interpreted as a URL......âœ“
         - should NOT automatically link supposed protocol-relative URLs in the form of 123//yahoo.com, which is most likely not supposed to be interpreted as a URL......âœ“
         - should automatically link supposed protocol-relative URLs as long as the character before the '//' is a non-word character......âœ“
       parenthesis handling
         - should include parentheses in URLs......âœ“
         - should include parentheses in URLs with query strings......âœ“
         - should include parentheses in URLs with hash anchors......âœ“
         - should include parentheses in URLs, when the URL is also in parenthesis itself......âœ“
         - should not include a final closing paren in the URL, if it doesn't match an opening paren in the url......âœ“
         - should not include a final closing paren in the URL when a path exists......âœ“
         - should not include a final closing paren in the URL when a query string exists......âœ“
         - should not include a final closing paren in the URL when a hash anchor exists......âœ“
         - should include escaped parentheses in the URL......âœ“
       Special character handling
         - should include $ in URLs......âœ“
         - should include $ in URLs with query strings......âœ“
         - should include * in URLs......âœ“
         - should include * in URLs with query strings......âœ“
         - should include ' in URLs......âœ“
         - should include ' in URLs with query strings......âœ“
         - should include [ and ] in URLs with query strings......âœ“
         - should handle an example Google Maps URL with query string......âœ“
       URL path, query string, and hash handling
         - should automatically link URLs in the form of yahoo.com/path/to/file.html, handling the path......âœ“
         - should automatically link URLs in the form of yahoo.com?hi=1, handling the query string......âœ“
         - should automatically link URLs in the form of yahoo.com#index1, handling the hash......âœ“
         - should automatically link URLs in the form of yahoo.com/path/to/file.html?hi=1, handling the path and the query string......âœ“
         - should automatically link URLs in the form of yahoo.com/path/to/file.html#index1, handling the path and the hash......âœ“
         - should automatically link URLs in the form of yahoo.com/path/to/file.html?hi=1#index1, handling the path, query string, and hash......âœ“
         - should automatically link a URL with a complex hash (such as a Google Analytics url)......âœ“
         - should automatically link URLs in the form of 'http://yahoo.com/sports.', without including the trailing period......âœ“
         - should remove trailing slash from 'http://yahoo.com/'......âœ“
         - should remove trailing slash from 'http://yahoo.com/sports/'......âœ“
       - should automatically link multiple URLs in the same input string......âœ“
     email address linking
       - should automatically link an email address which is the only text in the string......âœ“
       - should automatically link email addresses at the start of the string......âœ“
       - should automatically link an email address in the middle of the string......âœ“
       - should automatically link email addresses at the end of the string......âœ“
       - should automatically link email addresses with a period in the 'local part'......âœ“
       - should automatically link fully-capitalized email addresses......âœ“
       - should properly link an email address in parenthesis......âœ“
       - should NOT automatically link any old word with an @ character in it......âœ“
     twitter handle linking
       - should automatically link a twitter handle which is the only thing in the string......âœ“
       - should automatically link twitter handles at the beginning of a string......âœ“
       - should automatically link twitter handles in the middle of a string......âœ“
       - should automatically link twitter handles at the end of a string......âœ“
       - should automatically link twitter handles surrounded by parentheses......âœ“
       - should automatically link twitter handles surrounded by braces......âœ“
       - should automatically link twitter handles surrounded by brackets......âœ“
       - should automatically link multiple twitter handles in a string......âœ“
       - should automatically link fully capitalized twitter handles......âœ“
     phone number linking
       - should automatically link an in-country phone number......âœ“
       - should automatically link an international phone number......âœ“
       - should automatically link a phone number that is completely surrounded by parenthesis......âœ“
       - should automatically link a phone number contained in a larger string......âœ“
       - should automatically link a phone number surrounded by parenthesis contained in a larger string......âœ“
       - should NOT automatically link a phone number when there are no delimiters, since we don't know for sure if this is a phone number or some other number......âœ“
     hashtag linking
       - should NOT autolink hashtags by default for both backward compatibility, and because we don't know which service (twitter, facebook, etc.) to point them to......âœ“
       - should NOT autolink hashtags the `hashtag` cfg is explicitly false......âœ“
       - should automatically link hashtags to twitter when the `hashtag` option is 'twitter'......âœ“
       - should automatically link hashtags to facebook when the `hashtag` option is 'facebook'......âœ“
       - should automatically link hashtags which are part of a full string......âœ“
       - should NOT automatically link a hashtag when the '#' belongs to part of another string......âœ“
     proper handling of HTML in the input string
       - should automatically link URLs past the last HTML tag......âœ“
       - should NOT automatically link URLs within the attributes of existing HTML tags......âœ“
       - should NOT automatically link URLs within the attributes of existing HTML tags when there are prefixed or suffixed spaces in the attribute values......âœ“
       - should NOT automatically link URLs within self-closing tags......âœ“
       - should NOT automatically link a URL found within the inner text of a pre-existing anchor tag......âœ“
       - should NOT automatically link a URL found within the inner text of a pre-existing anchor tag, but link others......âœ“
       - should NOT automatically link an image tag with a URL inside it, inside an anchor tag......âœ“
       - should NOT automatically link an image tag with a URL inside it, inside an anchor tag, but match urls around the tags......âœ“
       - should NOT automatically link an image tag with a URL inside of it, when it has another attribute which has extraneous spaces surround its value (Issue #45)......âœ“
       - should NOT automatically link a tag within an attribute of another tag (Issue #45)......âœ“
       - should NOT remove `br` tags from the output (Issue #46)......âœ“
       - should NOT automatically link anything in a !DOCTYPE tag (Issue #53)......âœ“
       - should NOT automatically link within comment tags......âœ“
       - should NOT automatically link within multi-line comment tags......âœ“
       - should automatically link between comment tags, but not the comment tags themselves......âœ“
       - should NOT automatically link within comment tags, using part of the comment tag as the URL (Issue #88)......âœ“
       - should automatically link tags after a !DOCTYPE tag......âœ“
       - should autolink the link, and not fail with 100% cpu in the Regex engine when presented with the input in issue #54......âœ“
       - should NOT modify the email address with other tags when inside another anchor......âœ“
       - should allow the full range of HTML attribute name characters as specified in the W3C HTML syntax document (http://www.w3.org/TR/html-markup/syntax.html)......âœ“
       - should properly autolink text within namespaced HTML elements, skipping over html elements with urls in attribute values......âœ“
       - should properly skip over attribute names that could be interpreted as urls, while still autolinking urls in their inner text......âœ“
       - should properly skip over attribute names that could be interpreted as urls when they have a value, while still autolinking urls in their inner text......âœ“
       - should properly skip over attribute names that could be interpreted as urls when they have a value and any number of spaces between attrs, while still autolinking urls in their inner text......âœ“
       - should properly skip over attribute values that could be interpreted as urls/emails/twitter accts, while still autolinking urls in their inner text......âœ“
       - should properly skip over attribute names and values that could be interpreted as urls/emails/twitter accts, while still autolinking urls in their inner text......âœ“
       - should properly handle HTML markup + text nodes that are nested within <a> tags......âœ“
       - should attempt to handle some invalid HTML markup relating to <a> tags, esp if there are extraneous closing </a> tags......âœ“
       - should attempt to handle some more complex invalid HTML markup relating to <a> tags, esp if there are extraneous closing </a> tags......âœ“
       - should handle &nbsp; after a url and not treat it as a query string......âœ“
       - should handle HTML entities like &nbsp; within a non-autolinked part of a text node, properly appending it to the output......âœ“
       - should handle &amp; inside a url and not ignore it......âœ“
       - should handle line breaks inside an HTML tag, not accidentally autolinking a URL within the tag......âœ“
       - should handle a URL inside an HTML-encoded anchor tag (Issue #76)......âœ“
     `newWindow` option
       - should not add target="_blank" when the 'newWindow' option is set to false......âœ“
       - should add target="_blank" when the 'newWindow' option is set to true......âœ“
     `stripPrefix` option
       - should not remove the prefix for non-http protocols......âœ“
       - should remove 'http://www.' when the 'stripPrefix' option is set to `true`......âœ“
       - should not remove 'http://www.' when the 'stripPrefix' option is set to `false`......âœ“
       - should remove the prefix by default......âœ“
     `truncate` option
       - should truncate long a url/email/twitter to the given number of characters with the 'truncate' option specified......âœ“
       - should leave a url/email/twitter alone if the length of the url is exactly equal to the length of the 'truncate' option......âœ“
       - should leave a url/email/twitter alone if it does not exceed the given number of characters provided in the 'truncate' option......âœ“
     `className` option
       - should not add className when the 'className' option is not a string with at least 1 character......âœ“
       - should add className to links......âœ“
       - should add className to email links......âœ“
       - should add className to twitter links......âœ“
     `urls`, `email`, `phone`, and `twitter` options
       - should link all 5 types if all 5 urls/email/phone/twitter/hashtag options are enabled......âœ“
       - should not link urls when they are disabled......âœ“
       - should not link email addresses when they are disabled......âœ“
       - should not link phone numbers when they are disabled......âœ“
       - should not link Twitter handles when they are disabled......âœ“
       - should not link Hashtags when they are disabled......âœ“
     `replaceFn` option
       - should populate a UrlMatch object with the appropriate properties......âœ“
       - should populate an EmailMatch object with the appropriate properties......âœ“
       - should populate a TwitterMatch object with the appropriate properties......âœ“
       - should replace the match as Autolinker would normally do when `true` is returned from the `replaceFn`......âœ“
       - should replace the match as Autolinker would normally do when there is no return value (i.e. `undefined` is returned) from the `replaceFn`......âœ“
       - should leave the match as-is when `false` is returned from the `replaceFn`......âœ“
       - should use a string returned from the `replaceFn` as the HTML that is replaced in the input......âœ“
       - should allow an Autolinker.HtmlTag instance to be returned from the `replaceFn`, and use that as the HTML to be replaced from the input......âœ“
       - should allow an Autolinker.HtmlTag instance to be modified before being returned from the `replaceFn`......âœ“
       - should not drop a trailing parenthesis of a URL match if the `replaceFn` returns false......âœ“
       special cases which check the `prefixStr` and `suffixStr` vars in the code
         - should leave the match as-is when the `replaceFn` returns `false` for a Twitter match......âœ“
         - should leave the match as-is when the `replaceFn` returns `false`, and the URL was wrapped in parenthesis......âœ“
         - should leave the match as-is when the `replaceFn` returns `false`, and the URL was a protocol-relative match......âœ“
 Autolinker.HtmlTag
   - should be able to be instantiated with no arguments......âœ“
   - should be able to be configured via the config options......âœ“
   - should be able to be configured via setters......âœ“
   setTagName()
     - should set, and override, the tag name......âœ“
     - should return a reference to the HtmlTag instance, to allow method chaining......âœ“
   setAttr()
     - should set, then override, attribute properties......âœ“
     - should return a reference to the HtmlTag instance, to allow method chaining......âœ“
   setAttrs()
     - should set, then override, attribute properties......âœ“
     - should return a reference to the HtmlTag instance, to allow method chaining......âœ“
   setClass()
     - should set the CSS class to the tag when there are none yet......âœ“
     - should overwrite the current CSS classes on the tag......âœ“
     - should return a reference to the HtmlTag instance, to allow method chaining......âœ“
   addClass()
     - should add a CSS class to the tag when there are none yet......âœ“
     - should add multiple CSS classes to the tag when there are none yet......âœ“
     - should add a CSS class to existing CSS classes......âœ“
     - should add multiple CSS classes to existing CSS classes......âœ“
     - should not add duplicate CSS classes to the tag......âœ“
     - should return a reference to the HtmlTag instance, to allow method chaining......âœ“
   removeClass()
     - should have no effect when removing a CSS class from an HtmlTag with no CSS classes......âœ“
     - should remove a single CSS class from the HtmlTag......âœ“
     - should remove multiple CSS classes from the HtmlTag......âœ“
     - should return a reference to the HtmlTag instance, to allow method chaining......âœ“
   getClass()
     - should return an empty string when there are no CSS classes on the HtmlTag......âœ“
     - should return the CSS classes configured on the HtmlTag......âœ“
     - should return the CSS classes set using addClass()......âœ“
   hasClass()
     - should return `false` when there are no CSS classes on the HtmlTag......âœ“
     - should return `true` for a CSS class that exists on the HtmlTag......âœ“
     - should return `true` for a CSS class that exists on the HtmlTag, when there are multiple CSS classes......âœ“
     - should return `false` for a CSS class that is a substring of a CSS class on the HtmlTag......âœ“
   setInnerHtml()
     - should set, then override, the tag's inner HTML......âœ“
     - should return a reference to the HtmlTag instance, to allow method chaining......âœ“
   getInnerHtml()
     - should return an empty string if no inner HTML has been set......âœ“
     - should return the inner HTML set during construction......âœ“
     - should return the inner HTML set with setInnerHtml()......âœ“
   toAnchorString()
     - should populate only the tag name when no attribute are set, and no inner HTML is set......âœ“
     - should populate only the tag name and inner HTML when no attribute are set......âœ“
     - should populate both the tag name and attributes when set......âœ“
     - should populate all 3: tag name, attributes, and inner HTML when set......âœ“
     - should properly build an HTML string from just the mutator methods......âœ“
 Autolinker.Util
   splitAndCapture()
     - should throw an error if the supplied regular expression does not have the `global` flag set......âœ“
     - should return an array with the 'split' characters included......âœ“
     - should return an array with the 'split' characters included, when there are multiple sequences of characters to split on......âœ“
 Autolinker.htmlParser.HtmlParser
   - should return an empty array for an empty input string......âœ“
   text node handling
     - should return a single text node if there are no HTML nodes in it......âœ“
   HTML comment node handling
     - should return a single comment node if there is only an HTML comment node in it......âœ“
     - should handle a multi-line comment, and trim any amount of whitespace in the comment for the comment's text......âœ“
     - should produce 3 nodes for a text node, comment, then text node......âœ“
     - should produce 4 nodes for a text node, comment, text node, comment......âœ“
   HTML element node handling
     - should return a single element node if there is only an HTML element node in it......âœ“
     - should produce 3 nodes for a text node, element, then text node......âœ“
     - should be able to reproduce the input string based on the text that was provided to each returned `HtmlNode`......âœ“
   HTML entity handling
     - should [1mnot[22m match the &amp; HTML entity, as this may be part of a query string......âœ“
     - should properly parse a string that begins with an HTML entity node......âœ“
     - should properly parse a string that ends with an HTML entity node......âœ“
     - should properly parse a string that begins and ends with an HTML entity node......âœ“
     - should properly parse a string that has an HTML entity node in the middle......âœ“
     - should properly parse a string that only has an HTML entity node......âœ“
   combination examples
     - should properly create `HtmlNode` instances for each text/entity/comment/element node encountered, with the proper data filled in on each node......âœ“
     - should match tags of both upper and lower case......âœ“
   - should not freeze up the regular expression engine when presented with the input string in issue #54......âœ“

248 specs in 0.469s.
[32m>> [39m0 failures

[32mDone, without errors.[39m
